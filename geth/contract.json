{"source":"contract RHChain {            address private admin;            bool[3] private visibilities; /* [q1.visibile,q2.visibile,q3.visibile] */            mapping( address =\u003e bool ) private hasSubmitted;            mapping( address =\u003e  uint8[3] ) private submissions; /* @ --\u003e [idx q1.answer,idx q2.answer, idx q3.answer] */            int[3][3] private results; /* [nb vote q1.answer1, nb vote q1.answer2, nb vote q1.answer3 ][...] */                        bool public closed = false;            bytes32[3] public questions; /* questions hash */            bytes32[3] public answers; /* answers hash */                        event newResults(int[3][3] results);            event over(int[3][3] results); /* returns results with visibility. -1 is : not visible */            modifier onlyAdmin {                if( msg.sender != admin ) throw;                _            }            modifier onlyCollab{                if( msg.sender == admin ) throw;                _            }            modifier onlyOnce{               if( hasSubmitted[msg.sender] ) throw;               _            }            modifier onlyOpened {                if( closed ) throw;                _            }                        function RHChain(bytes32[3] quests, bytes32[3] answ){                admin = msg.sender;                questions = quests;                answers = answ;            }                        function submit(uint8[3] answ) onlyOpened onlyCollab onlyOnce returns(bool){                                if( !isSubmissionValid(answ) ) throw;                                submissions[msg.sender] = answ;                hasSubmitted[msg.sender] = true;                                for(uint8 i=0;i\u003cresults.length;i++){                    results[i][answ[i]]++;                }                                newResults(results);                return true;            }                        function close(bool[3] _visibilities) onlyAdmin onlyOpened returns(bool){                visibilities = _visibilities;                closed = true;                over(resultsWithVisibilityFilter());                return true;            }                        function mySubmission() returns(bool,uint8[3]) {                if( msg.sender == admin ) throw;                if( !hasSubmitted[msg.sender] ) throw;                else return (true,submissions[msg.sender]);            }                        function getResults() returns(bool, int[3][3] ){                if( msg.sender == admin ) return (true,results);                else if( closed ) return (true,resultsWithVisibilityFilter());                else throw;            }                        function getVisibilities() onlyAdmin returns(bool, bool[3] )  {                return (true,visibilities);            }                        function isSubmissionValid(uint8[3] sub) private returns (bool){                for(uint i=0;i\u003csub.length;i++){                    if( sub[i]\u003c0 || sub[i] \u003e 2 ) return false;                }                return true;            }            function resultsWithVisibilityFilter() private returns(int[3][3] ret) {                ret = results;                                for(uint8 i=0;i\u003cresults.length;i++){                    if( !visibilities[i] ){                        for( uint8 j=0 ; j\u003cresults.length ; j++){                            ret[i][j] =-1;                        }                }   }            }        }","language":"Solidity","languageVersion":"0.3.2","compilerVersion":"0.3.2","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /tmp/solc520041313","abiDefinition":[{"constant":false,"inputs":[],"name":"getVisibilities","outputs":[{"name":"","type":"bool"},{"name":"","type":"bool[3]"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"answers","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"questions","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":false,"inputs":[],"name":"getResults","outputs":[{"name":"","type":"bool"},{"name":"","type":"int256[3][3]"}],"type":"function"},{"constant":true,"inputs":[],"name":"closed","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"_visibilities","type":"bool[3]"}],"name":"close","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[],"name":"mySubmission","outputs":[{"name":"","type":"bool"},{"name":"","type":"uint8[3]"}],"type":"function"},{"constant":false,"inputs":[{"name":"answ","type":"uint8[3]"}],"name":"submit","outputs":[{"name":"","type":"bool"}],"type":"function"},{"inputs":[{"name":"quests","type":"bytes32[3]"},{"name":"answ","type":"bytes32[3]"}],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"results","type":"int256[3][3]"}],"name":"newResults","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"results","type":"int256[3][3]"}],"name":"over","type":"event"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}